import socket
import threading

def receive_messages(client_socket, current_username):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                print(message)
        except Exception as e:
            print(f"Error: {e}")
            break

def send_messages(client_socket, current_username):
    while True:
        user_input = input("Enter command or message: ")
        if user_input.strip() == '@quit':
            client_socket.sendall(user_input.encode('utf-8'))
            client_socket.close()
            break
        elif user_input.startswith('@'):
            client_socket.sendall(user_input.encode('utf-8'))
        else:
            client_socket.sendall(user_input.encode('utf-8'))

def main():
    while True:  # Keep looping until a unique username is provided
        try:
            while True:  # Loop for handling connection attempts
                host = input("Enter server IP address: ")
                port = int(input("Enter server port number: "))

                client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                client_socket.connect((host, port))

                break  # Break out of the connection loop if successful

            while True:  # Keep looping until a unique username is provided
                username = input("\nEnter your name: ")
                client_socket.sendall(username.encode('utf-8'))

                welcome_message = client_socket.recv(1024).decode('utf-8')

                if welcome_message.startswith("[Username"):
                    print(welcome_message)
                    continue
                else:
                    print(welcome_message)
                    break

            # Start receiving messages in a separate thread
            receive_thread = threading.Thread(target=receive_messages, args=(client_socket, username))
            receive_thread.start()

            # Send messages in the main thread
            send_messages(client_socket, username)

            # Join the receive thread to keep the main thread running
            receive_thread.join()

            client_socket.close()
        except Exception as e:
            print(f"Cannot connect to the server: {e}")

if __name__ == "__main__":
    main()
